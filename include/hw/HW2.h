#pragma once

#include "tools/Algorithms.h"
#include "tools/Environment.h"
#include "tools/Path.h"

#include <tuple>

namespace amp {

/// @brief Derive this class and implement your algorithm in the `plan` method. This class derives the MotionPlanner2D class with a "point" agent type
class BugAlgorithm : public PointMotionPlanner2D { //ZACK what is the : public? 
    public:
        /// @brief Solve a motion planning problem using a bug algorithm. Create a derived class and override this method
        //virtual amp::Path2D plan(const amp::Problem2D& problem) = 0;

        virtual ~BugAlgorithm() {} //ZACK what is virtual
};

class HW2 {
    public:
        /// @brief Get WO1 described in Exercise 2.
        /// @return Workspace 1
        static amp::Problem2D getWorkspace1();

        /// @brief Get WO2 described in Exercise 2.
        /// @return Workspace 2
        static amp::Problem2D getWorkspace2();

        /// @brief Checks the path generated by the bug algorithm against the problem
        /// @param path Path generated by bug algorithm
        /// @param prob Problem that path was generated on
        /// @param verbose Output logs displaying result
        /// @return `true` if path is a valid solution, `false` otherwise
        static bool check(const amp::Path2D& path, const amp::Problem2D& prob, bool verbose = true);

        /// @brief Checks the path generated by the bug algorithm against the problem
        /// @param path Path generated by bug algorithm
        /// @param prob Problem that path was generated on
        /// @param verbose Output logs displaying result
        /// @param collision_points Gather collision points found along the path
        /// @return `true` if path is a valid solution, `false` otherwise
        static bool check(const amp::Path2D& path, const amp::Problem2D& prob, std::vector<Eigen::Vector2d>& collision_points, bool verbose = true);

        /// @brief Generates a random problem, runs the algorithm, then check the validity of the returned solution.
        /// Similar to what the benchmarker in `grade()` will do
        /// @param algo Your implemented bug algorithm
        /// @param seed Seed the random generator. If the seed is `0u`, no seed is used (random)
        /// @param verbose Output logs displaying result
        /// @return `true` if path is a valid solution, `false` otherwise
        static bool generateAndCheck(BugAlgorithm& algo, bool verbose = true, uint32_t seed = 0u);

        /// @brief Generates a random problem, runs the algorithm, then check the validity of the returned solution.
        /// Similar to what the benchmarker in `grade()` will do
        /// @param algo Your implemented bug algorithm
        /// @param path Return the path generated by your algorithm
        /// @param prob Return the randomly generated problem used
        /// @param seed Seed the random generator. If the seed is `0u`, no seed is used (random)
        /// @param verbose Output logs displaying result
        /// @return `true` if path is a valid solution, `false` otherwise
        static bool generateAndCheck(BugAlgorithm& algo, amp::Path2D& path, amp::Problem2D& prob, bool verbose = true, uint32_t seed = 0u);

        /// @brief Generates a random problem, runs the algorithm, then check the validity of the returned solution.
        /// Similar to what the benchmarker in `grade()` will do
        /// @param algo Your implemented bug algorithm
        /// @param path Return the path generated by your algorithm
        /// @param prob Return the randomly generated problem used
        /// @param collision_points Gather collision points found along the path
        /// @param seed Seed the random generator. If the seed is `0u`, no seed is used (random)
        /// @param verbose Output logs displaying result
        /// @return `true` if path is a valid solution, `false` otherwise
        static bool generateAndCheck(BugAlgorithm& algo, amp::Path2D& path, amp::Problem2D& prob, std::vector<Eigen::Vector2d>& collision_points, bool verbose = true, uint32_t seed = 0u);

        /// @brief Tests your algorithm on Workspace1, Workspace2, and benchmarks your algorithm against many randomized environments.
        /// NOTE: Make sure your member variables are correctly reset after each call to plan(). This method does not reconstruct the 
        /// BugAlgorithm object that you pass in
        /// @param algo Your implemented bug algorithm
        /// @param email Your identikey@colorado.edu email
        /// @param argc Pass the cmd line args from main
        /// @param argv Pass the cmd line args from main
        static int grade(BugAlgorithm& algo, const std::string& email, int argc, char** argv);

        /// @brief Tests your algorithm on Workspace1, Workspace2, and benchmarks your algorithm against many randomized environments.
        /// NOTE: Reconstructs your algorithm object every trial to make sure your member variables are reset, etc...
        /// @tparam BUG_ALGORITHM_T The type of your bug algorithm object (MUST derive BugAlgorithm)
        /// @tparam ..._CTOR_ARGS_T [automatically deduced] Constructor parameter arg types 
        /// @param email Your identikey@colorado.edu email
        /// @param argc Pass the cmd line args from main
        /// @param argv Pass the cmd line args from main
        /// @param constructor_arguments Pass the remaining arguments as you would to your constructor
        template <class BUG_ALGORITHM_T, class... _CTOR_ARGS_T>
        static int grade(const std::string& email, int argc, char** argv, _CTOR_ARGS_T&&... constructor_arguments);
};

#define AMP_HW2_ALIAS "hw2"
#define AMP_HW2_PACKAGE_NAME "hw2_report_card"
}

#include "public/HW2_impl.h"